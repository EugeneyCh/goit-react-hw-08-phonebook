{"version":3,"file":"static/js/842.cbffdcee.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/users/selectors.js","components/ContactForm/contactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/filter.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","components/Loader/loader.js","webpack://goit-react-hw-08-phonebook/./src/components/Contact/Contact.module.css?03fd","components/Contact/contact.js","components/pages/ContactsView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formEditor\":\"ContactForm_formEditor__PNLhK\",\"inputArea\":\"ContactForm_inputArea__vN+up\",\"contactButton\":\"ContactForm_contactButton__jSKp4\"};","export const getContacts = state => state.contacts.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getIsLoading = state => state.contacts.contacts.isLoading;\nexport const getError = state => state.contacts.contacts.error;\n\n// export const getContacts = state => {\n//   return {\n//     items: state.contacts.items,\n//     isLoading: state.contacts.isLoading,\n//     error: state.contacts.error,\n//     filter: state.filter,\n//   };\n// };\n","import css from './ContactForm.module.css';\n// import { toast } from 'react-toastify';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/users/selectors';\n// import { addContact } from 'redux/users/slice';\nimport { useEffect, useRef } from 'react';\nimport { addContactFromDB, fetchContacts } from 'redux/users/operations';\n// import { addContactFromDB } from 'redux/users/operations';\n\nfunction ContactForm() {\n  const contacts = useSelector(getContacts);\n  const contactNameRef = useRef();\n  const contactNumberRef = useRef();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const saveContactHandler = () => {\n    const name = contactNameRef.current.value.trim();\n    const number = contactNumberRef.current.value.trim();\n    if (name === '') {\n      console.log('contactName is empty', name);\n      return alert(`Enter name, please`);\n    }\n\n    if (contacts.length === 0) {\n      console.log('Contacts in line 30 are...', contacts);\n      dispatch(\n        addContactFromDB({\n          name,\n          number,\n        })\n      );\n    } else {\n      console.log('Contacts in line 39 are...', contacts);\n\n      const checkNameToSame = name => {\n        const lowerCaseNewName = name.toLowerCase().trim();\n        console.log('lowerCaseNewName is ...', lowerCaseNewName);\n        return contacts.some(\n          contact => contact.name.toLowerCase() === lowerCaseNewName\n        );\n      };\n      checkNameToSame(name)\n        ? alert(`${name} is already in contacts`)\n        : dispatch(\n            addContactFromDB({\n              name,\n              number,\n            }),\n            // dispatch(addContact),\n            (contactNameRef.current.value = ''),\n            (contactNumberRef.current.value = '')\n          );\n      dispatch(fetchContacts());\n    }\n  };\n  return (\n    <form className={css.formEditor}>\n      <label>\n        Name\n        <input\n          className={css.inputArea}\n          ref={contactNameRef}\n          type=\"text\"\n          placeholder=\"Name of contact\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Phone\n        <input\n          className={css.inputArea}\n          ref={contactNumberRef}\n          type=\"tel\"\n          placeholder=\"Number of contact\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button\n        type=\"button\"\n        onClick={saveContactHandler}\n        className={css.contactButton}\n      >\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"findZone\":\"Filter_findZone__aitbz\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/users/selectors';\nimport { updateFilter } from 'redux/users/slice';\nimport React, { useRef } from 'react';\n\nimport css from './Filter.module.css';\n\nfunction Filter() {\n  const filter = useSelector(getFilter);\n  console.log('Filter search is...', filter);\n  const filterQueryRef = useRef();\n  const dispatch = useDispatch();\n\n  const saveFilterQuery = filter => {\n    dispatch(\n      updateFilter((filter = filterQueryRef.current.value.trim().toLowerCase()))\n    );\n  };\n\n  return (\n    <label className={css.findZone}>\n      Find contacts by name\n      <input ref={filterQueryRef} type=\"text\" onChange={saveFilterQuery} />\n    </label>\n  );\n}\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","import React from 'react';\nimport css from './ContactList.module.css';\n\nexport default function ContactList({ children }) {\n  return <ul className={css.contactList}>{children}</ul>;\n}\n","import React from 'react';\nimport { MutatingDots } from 'react-loader-spinner';\n\nfunction Loader() {\n  return (\n    <MutatingDots\n      height=\"100\"\n      width=\"100\"\n      color=\"#305ad9\"\n      secondaryColor=\"#d9cd30\"\n      radius=\"12.5\"\n      ariaLabel=\"mutating-dots-loading\"\n      wrapperStyle={{\n        display: 'flex',\n        justifyContent: 'start',\n        alignItems: 'center',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n    />\n  );\n}\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactRow\":\"Contact_contactRow__6hlqb\",\"deleteButton\":\"Contact_deleteButton__G9qkX\",\"deleteIcon\":\"Contact_deleteIcon__-5BGh\"};","import { useSelector, useDispatch } from 'react-redux';\n// import { getContacts } from 'redux/users/selectors';\nimport {\n  getContacts,\n  getFilter,\n  getIsLoading,\n  getError,\n} from 'redux/users/selectors';\nimport { deleteContact } from 'redux/users/slice';\nimport Loader from 'components/Loader/loader';\nimport css from './Contact.module.css';\n\nimport { deleteContactFromDB } from 'redux/users/operations';\n\nfunction Contact() {\n  // const { contacts, filter, isLoading } = useSelector(getContacts);\n\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContactFromDB(id));\n    console.log('Deleting contact with id', id);\n    dispatch(deleteContact(id));\n  };\n  // const handleDeleteContact = id => {\n  //   dispatch(deleteContact(id));\n  // };\n\n  const getVisibleContacts = () => {\n    if (contacts) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter)\n      );\n    }\n  };\n\n  const visibleContact = getVisibleContacts();\n  if (isLoading) {\n    return <Loader />;\n  }\n  if (error) {\n    return 'Error' + error;\n  }\n  return (\n    <>\n      {visibleContact ? (\n        visibleContact.map(({ id, name, number }) => (\n          <li key={id} className={css.contactRow}>\n            <span>{name}</span>\n            <span>{number}</span>\n            <button\n              type=\"button\"\n              className={css.deleteButton}\n              onClick={() => handleDeleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))\n      ) : (\n        <p>No contacts to display.</p>\n      )}\n    </>\n  );\n}\n\nexport default Contact;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ContactForm from 'components/ContactForm/contactForm';\nimport Filter from 'components/Filter/filter';\nimport ListContacts from 'components/ContactList/ContactList';\nimport Contact from 'components/Contact/contact';\nimport { fetchContacts } from 'redux/users/operations';\n// import { getIsLoading } from 'redux/users/selectors';\n// import Loader from 'components/Loader/loader';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n  //   const isloading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts);\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />;\n      <div>\n        <h2>Contacts</h2>\n        <Filter />\n        {/* {isloading && <Loader />} */}\n        <ListContacts children={<Contact />} />\n      </div>\n    </>\n  );\n\n  // className={css.contactList}\n}\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","getError","error","useSelector","contactNameRef","useRef","contactNumberRef","dispatch","useDispatch","useEffect","fetchContacts","className","css","ref","type","placeholder","name","pattern","title","required","onClick","current","value","trim","number","console","log","alert","length","addContactFromDB","lowerCaseNewName","toLowerCase","some","contact","checkNameToSame","filterQueryRef","onChange","updateFilter","ContactList","children","height","width","color","secondaryColor","radius","ariaLabel","wrapperStyle","display","justifyContent","alignItems","wrapperClass","visible","visibleContact","includes","getVisibleContacts","map","id","deleteContactFromDB","deleteContact","handleDeleteContact","ContactsView"],"sourceRoot":""}